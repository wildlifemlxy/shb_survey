import React, { Component } from 'react';
import '../../css/components/Location/Location.css'; // Import the new CSS file for location styling
import '../../css/components/Form/FormControls.css'; // Import common form controls CSS
import './ObserverInfoSection.css'; // Import component-specific styles

class ObserverInfoSection extends Component {
  constructor(props) {
    super(props);
    this.state = {
      isOthersSelected: false,
      showLocationDropdown: false,
      parksList: [
        "Bidadari Park",
        "Bukit Timah Nature Park",
        "Bukit Batok Nature Park",
        "Gillman Barracks",
        "Hindhede Nature Park",
        "Mandai Boardwalk",
        "Pulau Ubin",
        "Rifle Range Nature Park",
        "Rail Corridor (Kranji)",
        "Rail Corridor (Hillview)",
        "Rail Corridor (Bukit Timah)",
        "Singapore Botanic Gardens",
        "Springleaf Nature Park",
        "Sungei Buloh Wetland Reserve",
        "Windsor Nature Park",
        "Others"
      ]
    };
  }
  
  // Set ref for dropdown container
  setLocationDropdownRef = (node) => {
    this.locationDropdownRef = node;
  };
  
  // Helper method to get current user's name from localStorage
  getCurrentUserName = () => {
    try {
      const user = JSON.parse(localStorage.getItem('user'));
      return user?.name || '';
    } catch (error) {
      console.error('Error parsing user from localStorage:', error);
      return '';
    }
  };

  // Modified onAddObserverName to auto-populate with current user's name
  handleAddObserverName = () => {
    const userName = this.getCurrentUserName();
    if (this.props.onAddObserverName) {
      // Call the parent's method and pass the userName
      this.props.onAddObserverName(userName);
    }
  };

  // Method to populate first observer name if empty and set up event listeners
  componentDidMount() {
    const { newSurvey, onObserverNameChange } = this.props;
    const observerNames = newSurvey['Observer name'] || [''];
    
    // If the first observer name is empty, auto-populate with current user's name
    if (observerNames.length === 1 && observerNames[0] === '') {
      const userName = this.getCurrentUserName();
      if (userName && onObserverNameChange) {
        onObserverNameChange(0, userName);
      }
    }
    
    // Add event listener for clicks outside the dropdown
    document.addEventListener('mousedown', this.handleClickOutside);
  }
  
  componentWillUnmount() {
    // Remove event listener when component unmounts
    document.removeEventListener('mousedown', this.handleClickOutside);
  }

  // Simple location change handler that just passes the change to parent
  handleLocationChange = (e) => {
    if (this.props.onInputChange) {
      this.props.onInputChange(e);
    }
  }

  // Toggle location dropdown visibility
  toggleLocationDropdown = () => {
    this.setState(prevState => ({
      showLocationDropdown: !prevState.showLocationDropdown
    }));
  }

  // Handle location selection from dropdown
  handleLocationSelect = (location) => {
    // Create a synthetic event to pass to the parent's change handler
    const syntheticEvent = {
      target: {
        name: 'Location',
        value: location
      }
    };
    
    if (this.props.onInputChange) {
      this.props.onInputChange(syntheticEvent);
    }
    
    // Hide the dropdown after selection
    this.setState({ showLocationDropdown: false });
  }
  
  // Handle clicks outside the dropdown
  handleClickOutside = (e) => {
    if (this.locationDropdownRef && !this.locationDropdownRef.contains(e.target)) {
      this.setState({ showLocationDropdown: false });
    }
  }

  // Helper to render a field label with an asterisk for required fields
  renderTitleWithAsterisk = (title) => {
    return (
      <div className="field-label">
        {title} <span className="required-asterisk">*</span>
      </div>
    );
  };

  render() {
    const { newSurvey, onInputChange, showError, isSubmitAttempted } = this.props;
    const { isOthersSelected, parksList, showLocationDropdown } = this.state;
    
    return (
      <div className="observer-info-section">
        {/* Observer name (multiple entry) */}
        <div className="form-group">
          <label>Observer name</label>
          {(newSurvey['Observer name'] || ['']).map((name, idx) => (
            <div key={idx} className="observer-name-row">
              <input
                type="text"
                value={name}
                onChange={e => this.props.onObserverNameChange(idx, e.target.value)}
                className="form-control"
                placeholder={`Observer name${(newSurvey['Observer name'] || []).length > 1 ? ` #${idx + 1}` : ''}`}
                style={{ flex: 1 }}
              />
              {(newSurvey['Observer name'] || []).length > 1 && (
                <button
                  type="button"
                  className="btn-remove-observer"
                  onClick={() => this.props.onRemoveObserverName(idx)}
                  aria-label="Remove observer"
                >
                  -
                </button>
              )}
              {idx === (newSurvey['Observer name'] || []).length - 1 && (
                <button
                  type="button"
                  className="btn-add-observer"
                  onClick={this.handleAddObserverName}
                  aria-label="Add observer"
                >
                  +
                </button>
              )}
            </div>
          ))}
          {this.props.fieldErrors && this.props.fieldErrors['Observer name'] && (
            <div className="observer-error-message">{this.props.fieldErrors['Observer name']}</div>
          )}
        </div>
        
        {/* Location with custom dropdown */}
        <div className="form-group">
          <label htmlFor="location-input">Location</label>
          <div className="location-field-container" ref={this.setLocationDropdownRef}>
            <input
              id="location-input"
              type="text"
              name="Location"
              value={newSurvey['Location'] || ''}
              onChange={this.handleLocationChange}
              onFocus={this.toggleLocationDropdown}
              className={`form-control ${this.props.fieldErrors && this.props.fieldErrors['Location'] ? 'input-error' : ''}`}
              placeholder="Enter a location"
              autoComplete="off"
            />
            {showLocationDropdown && (
              <div className="location-dropdown">
                {parksList.map((park, index) => (
                  <div 
                    key={index} 
                    className="location-option"
                    onClick={() => this.handleLocationSelect(park)}
                  >
                    {park}
                  </div>
                ))}
              </div>
            )}
          </div>
          {this.props.fieldErrors && this.props.fieldErrors['Location'] && (
            <div className="observer-error-message">{this.props.fieldErrors['Location']}</div>
          )}
        </div>
        
        {/* Date */}
        <div className="form-group">
          <label>Date</label>
          <input
            type="date"
            name="Date"
            value={newSurvey['Date'] || ''}
            onChange={onInputChange}
            className={`form-control ${this.props.fieldErrors && this.props.fieldErrors['Date'] ? 'input-error' : ''}`}
            placeholder="DD/MM/YYYY"
            autoComplete="off"
            style={{
              position: 'relative'
            }}
            onFocus={(e) => {
              e.target.showPicker && e.target.showPicker();
            }}
          />
          {this.props.fieldErrors && this.props.fieldErrors['Date'] && (
            <div className="observer-error-message">{this.props.fieldErrors['Date']}</div>
          )}
        </div>
        
        {/* Number of Observation */}
        <div className="form-group">
          <label>Number of Observation</label>
          <input
            type="text"
            name="Number of Observation"
            value={newSurvey['Number of Observation'] || ''}
            onChange={onInputChange}
            className={`form-control ${this.props.fieldErrors && this.props.fieldErrors['Number of Observation'] ? 'input-error' : ''}`}
            placeholder="e.g. 1, 2, 3..."
          />
          {this.props.fieldErrors && this.props.fieldErrors['Number of Observation'] && (
            <div className="observer-error-message">{this.props.fieldErrors['Number of Observation']}</div>
          )}
        </div>
      </div>
    );
  }
}

export default ObserverInfoSection;
